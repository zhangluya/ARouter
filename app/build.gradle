import com.android.build.api.transform.DirectoryInput
import com.android.build.api.transform.JarInput
import com.android.build.api.transform.QualifiedContent
import com.android.build.api.transform.Transform
import com.android.build.api.transform.Format
import com.android.build.api.transform.TransformException
import com.android.build.api.transform.TransformInput
import com.android.build.api.transform.TransformInvocation
import com.android.build.gradle.AppExtension
import com.android.build.gradle.AppPlugin
import com.android.build.gradle.internal.pipeline.TransformManager
import org.apache.commons.io.FileUtils
import org.apache.commons.codec.digest.DigestUtils

import java.util.jar.JarEntry
import java.util.jar.JarFile

apply plugin: 'com.android.application'
apply plugin: 'com.alibaba.arouter'
apply plugin: RoutersPlugin

android {
    compileSdkVersion Integer.parseInt(COMPILE_SDK_VERSION)
    buildToolsVersion BUILDTOOLS_VERSION

    defaultConfig {
        minSdkVersion Integer.parseInt(MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(TARGET_SDK_VERSION)
        versionName "0.0.1"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        debug {
            storeFile file("./doc/debug/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    annotationProcessor project(':arouter-compiler')
    compile project(':arouter-api')
    compile project(':module-java')
    compile project(':module-kotlin')
    compile project(':arouter-annotation')

    compile 'com.alibaba:fastjson:1.2.9'

    compile "com.android.support:support-v4:${SUPPORT_LIB_VERSION}"
    compile "com.android.support:appcompat-v7:${SUPPORT_LIB_VERSION}"
    compile 'com.android.tools.build:gradle-api:2.1.3'
}

class RoutersPlugin implements Plugin<Project> {

    @Override
    void apply(Project target) {
        println "--- Start routers plugin ---"
        def has = target.plugins.hasPlugin(AppPlugin)
        if (has) {
            println "--- Has app plugin ---"
            def android = target.extensions.getByType(AppExtension)
            def transformImpl = new RoutersGenerator()
            android.registerTransform(transformImpl)
        }
    }
}

class RoutersGenerator extends Transform {

    @Override
    String getName() {
        return "RoutersGenerator"
    }

    @Override
    Set<QualifiedContent.ContentType> getInputTypes() {
        return TransformManager.CONTENT_CLASS
    }

    @Override
    Set<? super QualifiedContent.Scope> getScopes() {
        return TransformManager.SCOPE_FULL_PROJECT
    }

    @Override
    boolean isIncremental() {
        return false
    }

    @Override
    void transform(TransformInvocation transformInvocation) throws TransformException, InterruptedException, IOException {
        super.transform(transformInvocation)

        println "--- Routers plugin transform ---"
        def routersClassName = new StringBuilder();
        transformInvocation.inputs.each { TransformInput input ->
            input.directoryInputs.each { DirectoryInput directoryInput ->
                File dest = transformInvocation.outputProvider.getContentLocation(directoryInput.name, directoryInput.contentTypes, directoryInput.scopes, Format.DIRECTORY)
                String root = directoryInput.file.absolutePath
                if (!root.endsWith(File.separator)) {
                    root += File.separator
                }
                directoryInput.file.eachFileRecurse { File file ->
                    def path = file.absolutePath.replace(root, '')
                    println "--- Routers directory each input ${path} ---"
                    if (file.isFile() && path.endsWith(".class") && path.startsWith("com/alibaba/android/arouter/routes")|| path.startsWith("com/alibaba/android/arouter") && path.endsWith("Autowired.class")) {
                        routersClassName.append(path.replace("/", ".").replace(".class", "")).append("\n")
                    }
                }

                // copy to dest
                FileUtils.copyDirectory(directoryInput.file, dest)
            }
            input.jarInputs.each { JarInput jarInput ->

                def jarName = jarInput.name
                def md5Name = DigestUtils.md5Hex(jarInput.file.getAbsolutePath())
                if (jarName.endsWith(".jar")) {
                    jarName = jarName.substring(0, jarName.length() - 4)
                }
                def dest = transformInvocation.outputProvider.getContentLocation(jarName + md5Name,
                        jarInput.contentTypes, jarInput.scopes, Format.JAR)

                def src = jarInput.file
                if (src) {
                    def jar = new JarFile(src)
                    def entries = jar.entries()
                    while (entries.hasMoreElements()) {
                        JarEntry jarEntry = (JarEntry) entries.nextElement()
                        String entryName = jarEntry.getName()
                        println "--- Class name ${entryName} ---"

                        if (entryName.startsWith("com/alibaba/android/arouter/routes") && entryName.endsWith(".class") || entryName.startsWith("com/alibaba/android/arouter") && entryName.endsWith("Autowired.class")) {
                            routersClassName.append(entryName.replace("/", ".").replace(".class", "")).append("\n")
                        }
                    }
                }

                FileUtils.copyFile(jarInput.file, dest)
            }

            println "--- Routers ${routersClassName}"

            def file = new File("app/src/main/assets")
            if(!file.exists()) {
                def mkdir = file.mkdir();
                if (!mkdir) {
                    println "mk assets error!!"

                    return
                }
            }

            def routesFile = new File(file, "routes.rt")
            if (routesFile.exists()) {
                routesFile.delete()
            }

            routesFile.createNewFile()

            def writer = new FileWriter(routesFile)
            writer.write(routersClassName.toString())
            writer.flush()
            writer.close()
        }
    }
}